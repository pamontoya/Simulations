# FUNCTIONS TO SIMULATE PHYLOGENETIC TREES AND ITS DISTRIBUTION RANGES

rm(list=ls(all=T))

library(sampSurf)
library(TreeSim)
library(phytools)
library(ape)
library(raster)


# -- Args -- 
# @ Ranges_data: distribRangesData
# @ index: j
# @ checker : checker

# -- retunrs:
# range_id: Numeric vector

match_range <- function(Ranges_data,index,checker){
	range_id <- match(checker[index], Ranges_data[,"NameTree"])
	return(range_id)
}

# -- Args -- 
# @ edge.length: | data frame, 4 columns | columns 1 and 2 are the edge information and columns 3 and 4 are the lenght branch
# @ axisUp : | numeric | upper limit of distribution (space limit). This will be used to generate an uniform distribution
# @ axisLow : | numeric | lower limit of distribution (space limit). This will be used to generate an uniform distribution

# -- retunrs:
# new.ranges.nodes: Numeric vector. Id lineage and new range information


gen.new.ranges <- function(edge.length, axisLow, axisUp) {
			new.ranges.nodes <- c()
			node <- t(as.matrix(edge.length[1:2]))
    			age_node <- edge.length[3]
    		
    			## to create new distribution ranges, the function newRangeSim will be used
    				
    			dRangesNodes <- newRangeSim(time = age_node, targetNew = node, axisLow = axisLow, axisUp = axisUp)
    			new.ranges.nodes <- c(new.ranges.nodes, dRangesNodes[[1]])
    			return(new.ranges.nodes)
  		}
                     		
                     		
##### simulationRangesTree: Function to generate a phylogenetic tree and its distribution ranges
##### This function simulate a phylogenetic tree with diversification rates defined a priori, and identifies extant lineages and its ranges in several cut-off point in time
##### A priori, must be defined the time span and starting point in time
##### The function saves in a data frame the extant species and its distribuion ranges features (size and position) for each cut-off point in time

# -- Args -- 
# @ ageTree : | numeric | age for simulation of phylogenetic tree
# @ cut : | numeric | Two elements are required. The first element is the start point in time and second element is time span
# @ speciationRate : | numeric | speciation rate / number between 0 and 1
# @ extinctionRate : | numeric | extinction rate / number between 0 and 1
# @ axisUp : | numeric | upper limit of distribution (space limit). This will be used to generate an uniform distribution to create distribution ranges
# @ axisLow : | numeric | lower limit of distribution (space limit). This will be used to generate an uniform distribution to create distribution ranges

# -- retunrs:
# toReturn: list cointining 1) data frame with distribution ranges features for each cut-off point, 2) simulated phylogenetic tree


simulationRangesTree <- function(ageTree, cut, speciationRate, extinctionRate, axisLow, axisUp)
	{
  		distribRangesData <- matrix(ncol=5, nrow=1)
  		colnames(distribRangesData) <- c("time", "NameTree", "Radius", "x", "y")
  		Class <- character(10000)
  		ranges <- vector("list", 10000)
  		
  		id_tree <- TreeSim::sim.bd.age(age = ageTree, numbsim = 1, lambda = speciationRate, mu = extinctionRate, frac = 1, mrca = FALSE, complete = TRUE, K = 0)
  		while( class(id_tree[[1]]) == "numeric" )
  		{
  			id_tree <- TreeSim::sim.bd.age(age = ageTree, numbsim = 1, lambda = speciationRate, mu = extinctionRate, frac = 1, mrca = FALSE, complete = TRUE, K = 0)
  		}
  		id_tree <- id_tree[[1]]
  		H <- phytools::nodeHeights(id_tree)
  		
  		## initial distribution range will be generated from an uniform distribution. The limits are defined for 'axisLow' and 'axisUp'
  		
  		initial_position <- runif(3, axisLow, axisUp)
  		
  		while( initial_position[1] == 0 )  initial_position[1] <- runif(n = 1, min = axisLow, max = axisUp)
  		
  		## In a data frame will be registered: 1. the distribution ranges features, and 2. the information about extant lineages, for each cut-off point in time.
  		## In this data frame, "class" attribute have two options: 
  		## "In" -> the lineage is within the evaluated time
  		## "Out" -> the lineage is out of evaluated time but it is generated for to create lineages distribution ranges of species extant at that time point (parental lineage)
  		
  		distData <- c("time" = 0, "NameTree" = unique(id_tree$edge[which(H[,1]==0.0000),1]), "Radius" = initial_position[1], "x" = initial_position[2], "y" = initial_position[3])
  		distribRangesData[1,] <- distData
  		Class[1] = "Initial"
  		
  		# index for distribRangesData		
  		
  		info.edge.H <- cbind(id_tree$edge, H)
  		ranges_Nodes <- t(apply(info.edge.H, 1, function(x) gen.new.ranges(edge.length = x , axisLow = axisLow, axisUp = axisUp)))
  		distribRangesData <- rbind(distribRangesData,ranges_Nodes)
  		Class[2:(nrow(ranges_Nodes)+1)] <- "Node"
  		k <- nrow(ranges_Nodes) + 2
  		cuts <- seq(from = cut[1] ,to = ageTree, by = cut[2])
  		distribRangesData <- rbind(distribRangesData,matrix(ncol=5, nrow=10000))
  		
  		for(i in 1:length(cuts))
  		{
			  time_i <- cuts[i]
			  
			  ## the function is based on identification of extant lineages in a given time
			  ## this identification recognizes the parental lineages which comes these extant lineages. For this, the first step is to identify the parental lineages
			  ## when the cut-off point in time is upper to age of phylogenetic tree, this will returned to present time
			
			  if(time_i < max(H))
			  	{
				  extant <- H[which(H[,1]<=time_i & H[,2]>time_i),]
				  if(class(extant)=="numeric") { extant <- t(as.matrix(extant)) }
				  lin <- id_tree$edge[which(H[,1]<=time_i & H[,2]>time_i),]
				  if(class(lin)=="numeric") { lin <- t(as.matrix(lin)) }
				  whichEdge <- unique(lin[which(extant[,2] >= time_i),1])
			  	}
			
			  if(time_i >= max(H)) 
			  	{
				  extant <- H[which(H[, 2] >= (max(H) - 1e-08)),]
				  if(class(extant)=="numeric") { extant <- t(as.matrix(extant)) }
				  lin <- id_tree$edge[which(H[, 2] >= (max(H) - 1e-08)),]	
				  if(class(lin)=="numeric") { lin <- t(as.matrix(lin)) }
				  whichEdge <- unique(lin[which(extant[,2] >= (max(H) - 1e-08)),1])
				  time_i = max(H)
			  	}
			
			  nLineages <- nrow(extant)
			
			  for(h in 1:length(whichEdge))
       	 		{
				    target <- whichEdge[h]
				    targetNewEdges <- lin[which(lin[,1] == target),]
				
			  	  	if(class(targetNewEdges)=="numeric") { targetNewEdges <- t(as.matrix(targetNewEdges)) }
				    checker <- unique(targetNewEdges[,2])
				    
				    random_moves <- sample(x = c(1,1,2), size = length(checker))

					for(j in 1:length(checker))
				    	{
				  	
				        ind <- match_range(distribRangesData,j,checker)
				        geoExtant <- distribRangesData[ind,]
				        if( class(geoExtant) == "numeric" ) geoExtant <- geoExtant
						if( class(geoExtant) != "numeric" ) geoExtant <- geoExtant[which(Class[ind]=="Node"),]
					    	mov <- random_moves[j]
					    
					    	if( mov == 1 ) ## no movement
					    		{
					    			
					    			print("no movement")
					    			data_geoExtant <- c("time" = time_i,"NameTree" = geoExtant[2], "Radius" = geoExtant[3], "x" = geoExtant[4], "y" = geoExtant[5])
					    					
    		                    if(k > length(Class))
    		                    		{
    			                       distribRangesData <- rbind(distribRangesData, matrix(ncol=6, nrow=10000))
    		                           Class <- c(Class, character(10000))	
    		   						}
    		   					
    		                    distribRangesData[k,] <- data_geoExtant
    		                    Class[k] = "In"
    		                    k <- k+1

					    		}
					    	
					    	if( mov == 2 ) ## movement
					    		{
					    			print("movement")
					    			
					    			## the change of range position will be made follow a normal distribution
					    		
					    			new_centerPoints <- rnorm(2, mean = 0, sd = sqrt(time_i-geoExtant[1]))
					    			newX <- geoExtant[4] + new_centerPoints[1]
					    			newY <- geoExtant[5] + new_centerPoints[2]			    		
					    			
					    			data_geoExtant <- c("time" = time_i, "NameTree" = geoExtant[2], "Radius" = geoExtant[3], "x" = newX, "y" = newY)
					    			
					    			if(k > length(Class))
					    				{
    			                       		distribRangesData <- rbind(distribRangesData, matrix(ncol=6, nrow=1000))
    		                           		Class <- c(Class, character(1000))	
    		   							}
    		                    		distribRangesData[k,] <- data_geoExtant
    		                    		Class[k] = "In"
    		                    		k <- k+1
					    		}
					    }
			  	}
			  
			  ## when time_i = age of phylogenetic tree, the loop will be breaked
			  
			  if(time_i == max(H)) { break }
		}
		
		Class <- Class[-which(Class == "")]
		distribRangesData <- distribRangesData[which(!is.na(distribRangesData[,1])),]
		
		toReturn <- list(data.frame(class=Class, distribRangesData), id_tree)
		return(toReturn)
		
		### END ###
		
	}	
	
