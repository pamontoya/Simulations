# FUNCTIONS TO SIMULATE PHYLOGENETIC TREES AND ITS DISTRIBUTION RANGES 

rm(list=ls(all=T))

library(sampSurf)
library(TreeSim)
library(phytools)
library(ape)
library(raster)

# FUNCTION 1

##### newRangeSim: Function to generate the simulated distribution ranges
##### This function simulate circular ranges using a uniform distribution 
##### The simulated distribution ranges are generated with a random size and random position within of limits defined a priori

# -- Args -- 
# @ time : | numeric | cut-off point in time / time_i
# @ targetNew : | Numeric | lineage id in phylogenetic tree of new ranges / targetNewEdges
#Â @ axisUp : | numeric | upper limit of distribution (space limit). This will be used to generate an uniform distribution
# @ axisLow : | numeric | lower limit of distribution (space limit). This will be used to generate an uniform distribution

# -- retunrs:
# data_newRangeSim: variable-length list containing polygon distribution range 

newRangeSim <- function(time, targetNew, axisLow, axisUp) 
	{
		data_newRangeSim <- list()
		
		## 'n' is the number of new distribution ranges will be generated. It could be generated one or two distribution ranges
		
		n <- nrow(targetNew)
		
		## the radius and position (x and y) will be selected from an uniform distributionn
		
		newRadius <- runif(n = 1, min = axisLow/4, max = axisUp/4)
		
		if( length(newRadius) == 0 | newRadius == 0 ) { newRadius <- runif(n = 1, min = axisLow/2, max = axisUp/2) }
		if( newRadius < 0 ) { newRadius <- newRadius * -1 }
		
		newCoords <- runif(n = 2, min = axisLow, max = axisUp) 
        distDataTemp_track <- c("time" = time, "NameTree" = targetNew[1, 2], "Radius" = newRadius, "x" = newCoords[1] , "y" = newCoords[2])

        data_newRangeSim[[1]] <- distDataTemp_track
      	
        if( n == 2 )
			{
				## the radius and position (x and y) will be selected from an uniform distributionn
		
            	newRadius2 <- runif(n = 1, min = axisLow/4, max = axisUp/4)
            	if( length(newRadius2) == 0 | newRadius2 == 0 ) { newRadius2 <- runif(n = 1, min = axisLow/2, max = axisUp/2) }
				if( newRadius2 < 0 ) { newRadius2 <- newRadius2 * -1 }
            	newCoords2 <- runif(n = 2, min = axisLow, max = axisUp) 
            	distDataTemp2 <- c("time" = time, "NameTree" = targetNew[2,2], "Radius" = newRadius2, "x" = newCoords2[1], "y" = newCoords2[2])
            	data_newRangeSim[[2]] <- distDataTemp2     				
			}	
			
		return (data_newRangeSim)
		
		### END ### 
	
	}
